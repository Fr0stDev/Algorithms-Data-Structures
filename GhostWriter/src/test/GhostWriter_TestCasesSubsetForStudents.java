package test;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import writing.AssignmentMetaData;
import writing.GhostWriter;
import writing.GhostWriterImpl_Moran;

/**
 * @author kart
 *
 */
public class GhostWriter_TestCasesSubsetForStudents {
	protected static String TEST_GOAL_MESSAGE;
	
	protected GhostWriter getGhostWriter(String inputText)
	{
		return new GhostWriterImpl_Moran(inputText);
	}
	
	@Points(value=0)
	@Test(expected=AssertionError.class, timeout=120000)
	public void assertionsEnabledTest()
	{
		TEST_GOAL_MESSAGE = "Check whether assertions are enabled";
		assert false;
		throw new RuntimeException("ENABLE ASSERTIONS IN RUN CONFIGURATIONS!");
	}
	
	@Points(value=0)
	@Test(timeout=120000)
	public void hoursWorkedAndTestCasesScoreTest()
	{
		TEST_GOAL_MESSAGE = "Implement getHoursSpentWorkingOnThisAssignment() and getScoreAgainstTestCasesSubset()";
		
		GhostWriter ghostWriter_STUDENT = getGhostWriter("");
		AssignmentMetaData assignmentMetaData_STUDENT = (AssignmentMetaData)ghostWriter_STUDENT;
		
		System.out.println("Hours Worked: " + assignmentMetaData_STUDENT.getHoursSpentWorkingOnThisAssignment());
		System.out.println("Score on TestCases_Subset: " + assignmentMetaData_STUDENT.getScoreAgainstTestCasesSubset());
	}

	@Points(value=10)
	@Test(timeout=120000)
	public void alphabetTest()
	{		
		String theAlphabet = "abcdefghijklmnopqrstuvwxyz";
		String seed = "g";
		
		TEST_GOAL_MESSAGE = "Generate correct output for inputText = '" + theAlphabet + "' and seed = '" + seed + "' and specified selection list";
		
		GhostWriter ghostWriter_STUDENT = getGhostWriter(theAlphabet);
		List<Integer> selectionList = Arrays.asList(1144531766, 3988681, 1121321150, 1672419207, 527675018, 396899247, 642323945, 99833262, 470283375, 1974776839);
		
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		
		String correctResult = "ghijklmnop";
		assertEquals(correctResult, studentOutputString);
	}
	
	@Points(value=10)
	@Test//(timeout=120000)
	public void piTest()
	{		
		String firstTenThousandDigitsOfPi = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632788659361533818279682303019520353018529689957736225994138912497217752834791315155748572424541506959508295331168617278558890750983817546374649393192550604009277016711390098488240128583616035637076601047101819429555961989467678374494482553797747268471040475346462080466842590694912933136770289891521047521620569660240580381501935112533824300355876402474964732639141992726042699227967823547816360093417216412199245863150302861829745557067498385054945885869269956909272107975093029553211653449872027559602364806654991198818347977535663698074265425278625518184175746728909777727938000816470600161452491921732172147723501414419735685481613611573525521334757418494684385233239073941433345477624168625189835694855620992192221842725502542568876717904946016534668049886272327917860857843838279679766814541009538837863609506800642251252051173929848960841284886269456042419652850222106611863067442786220391949450471237137869609563643719172874677646575739624138908658326459958133904780275900994657640789512694683983525957098258226205224894077267194782684826014769909026401363944374553050682034962524517493996514314298091906592509372216964615157098583874105978859597729754989301617539284681382686838689427741559918559252459539594310499725246808459872736446958486538367362226260991246080512438843904512441365497627807977156914359977001296160894416948685558484063534220722258284886481584560285060168427394522674676788952521385225499546667278239864565961163548862305774564980355936345681743241125150760694794510965960940252288797108931456691368672287489405601015033086179286809208747609178249385890097149096759852613655497818931297848216829989487226588048575640142704775551323796414515237462343645428584447952658678210511413547357395231134271661021359695362314429524849371871101457654035902799344037420073105785390621983874478084784896833214457138687519435064302184531910484810053706146806749192781911979399520614196634287544406437451237181921799983910159195618146751426912397489409071864942319615679452080951465502252316038819301420937621378559566389377870830390697920773467221825625996615014215030680384477345492026054146659252014974428507325186660021324340881907104863317346496514539057962685610055081066587969981635747363840525714591028970641401109712062804390397595156771577004203378699360072305587631763594218731251471205329281918261861258673215791984148488291644706095752706957220917567116722910981690915280173506712748583222871835209353965725121083579151369882091444210067510334671103141267111369908658516398315019701651511685171437657618351556508849099898599823873455283316355076479185358932261854896321329330898570642046752590709154814165498594616371802709819943099244889575712828905923233260972997120844335732654893823911932597463667305836041428138830320382490375898524374417029132765618093773444030707469211201913020330380197621101100449293215160842444859637669838952286847831235526582131449576857262433441893039686426243410773226978028073189154411010446823252716201052652272111660396665573092547110557853763466820653109896526918620564769312570586356620185581007293606598764861179104533488503461136576867532494416680396265797877185560845529654126654085306143444318586769751456614068007002378776591344017127494704205622305389945613140711270004078547332699390814546646458807972708266830634328587856983052358089330657574067954571637752542021149557615814002501262285941302164715509792592309907965473761255176567513575178296664547791745011299614890304639947132962107340437518957359614589019389713111790429782856475032031986915140287080859904801094121472213179476477726224142548545403321571853061422881375850430633217518297986622371721591607716692547487389866549494501146540628433663937900397692656721463853067360965712091807638327166416274888800786925602902284721040317211860820419000422966171196377921337575114959501566049631862947265473642523081770367515906735023507283540567040386743513622224771589150495309844489333096340878076932599397805419341447377441842631298608099888687413260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678";
		GhostWriter ghostWriter_STUDENT = getGhostWriter(firstTenThousandDigitsOfPi);
		String seed = "3.";
		
		TEST_GOAL_MESSAGE = "Generate correct output for inputText = firstTenThousandDigitsOfPi and seed = '" + seed + "' and specified selection list";
		
		List<Integer> selectionList = Arrays.asList(1453902599, 912973946, 1170493973, 1750175590, 777728271, 1269237135, 1621075201, 2108974862, 488693043, 1021538, 252293200, 1211698468, 798279725, 1364798084, 568340646, 1110562209, 993971315, 1901197846, 1124983251, 951687487, 1994980393, 1962038453, 1107931101, 1154645534, 751207710, 1546450669, 612956791, 2084454945, 904926743, 1312448529, 1765151427, 1127272254, 1385657001, 605867698, 2137530764, 926055702, 379626468, 1557599746, 1045175398, 1181320338, 1830471459, 902665529, 944967321, 669187427, 922361527, 1664105650, 1483243398, 1660567277, 1201458505, 922563775, 1112026128, 1075895427, 445127969, 1366387271, 1012622644, 2119323435, 1153174319, 2009757318, 1159564329, 1657580710, 1551349203, 216941453, 2000492553, 1240441663, 2145000595, 933991494, 1125791721, 1606507309, 542409568, 1548150931, 29372981, 1860755553, 1224830223, 1259574962, 224751229, 1941380304, 1536051931, 632227679, 1349700919, 1122202801, 1680691879, 48131841, 16726693, 830787576, 617710814, 1876883577, 1337706323, 155128101, 1474926118, 879809872, 946927620, 225742725, 1464151393, 1291646922, 763172879, 23723115, 1631845066, 990440777, 1538005843, 1317246216, 1451059685, 2042179736, 537119562, 812434211, 1067275544, 1768065928, 23111131, 993440918, 674654368, 2027388347, 423459624, 1777860907, 495937487, 719012673, 1263677914, 2137315268, 1554751063, 1477255518, 429398328, 23208314, 1200307303, 835098163, 981156136, 1348555803, 321580474, 410966912, 746144797, 968907235, 449465800, 381144001, 1541727992, 1991895248, 970787152, 930828406, 588433871, 157592333, 1392263667, 2057111759, 454573993, 916427066, 1006749681, 1688977255, 2032616795, 1815184938, 1875990124, 2069792282, 1046013642, 416123920, 1272598396, 540346575, 576059355, 1253845892, 1362045213, 632672280, 1966995739, 1036814609, 598385343, 277021949, 97456507, 1692210387, 1865343184, 2124909296, 1351435006, 1780004694, 1300876084, 1555573396, 891227374, 1788761226, 1200088502, 1314488843, 160656419, 2078000072, 566616785, 1039893774, 1992636954, 660206579, 345429533, 1233231452, 916324152, 603801340, 1172971938, 1193212724, 1823214892, 1090023213, 922943951, 1237724646, 1741478805, 1636112843, 865726973, 1755847257, 894944911, 1940209439, 1648594134, 2086981541, 1357487869, 620419777, 1383224127, 1241773403, 2006035658, 428252234, 1216851385, 8399909, 1435186307, 265070140, 1403592714, 88839658, 1852620317, 687347760, 79523045, 1290267639, 9104295, 1507238200, 850863837, 570005750, 1916376060, 672215334, 237121531, 2104946310, 1187225358, 398888543, 1193919991, 1688781544, 1154696889, 584129098, 1867777123, 512854043, 1086998835, 1501955780, 725703407, 1399440591, 1169844047, 1099170011, 2075650683, 805449724, 298687999, 2020192190, 211217573, 117300713, 22802972, 1049801863, 1788540575, 272292054, 881420874, 2146546051, 1464296695, 770451845, 1562008473, 1984889886, 708705975, 1650924322, 1382580302, 1194594201, 1657563338, 1200114137, 1762340283, 1412693753);
		
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		
		String correctResult = "3.14239667466100200482250382183052802938733196212830686312017597724504251888116816921757234322266596275126391090351672731830642350927848893146715195900197311599755699455117068516315916398438211623860317421726419196438485150346736816125705103176405596322514";
		assertEquals(correctResult, studentOutputString);
	}
	
	@Points(value=10)
	@Test(timeout=120000)
	public void motherGooseTest()
	{		
		String peterPiper = "Peter Piper picked a peck of pickled peppers; A peck of pickled peppers Peter Piper picked; If Peter Piper picked a peck of pickled peppers, Where's the peck of pickled peppers Peter Piper picked?";
		GhostWriter ghostWriter_STUDENT = getGhostWriter(peterPiper);
		String seed = "pickled";
		
		TEST_GOAL_MESSAGE = "Generate correct output for inputText = '" + peterPiper + "' and seed = '" + seed + "' and specified selection list";
		
		List<Integer> selectionList = Arrays.asList(256374724, 467417507, 268504790, 755524626, 1221582886, 957269485, 1506033942, 127403038, 309192716, 1576999136, 847926953, 1008870164, 882580240, 1149417742, 780405674, 1676485045, 831146029, 901120981, 1724676146, 1919399268, 1065087761, 1438156925, 1580650213, 1291799420, 2111204576, 1751539270, 1945402314, 1519570119, 61232496, 1499592313, 1156239701, 1401343755, 1418308723, 457242048, 1268458037, 1363806669, 274773227, 1265686425, 2054479558, 1782536828, 940016313, 630874775, 937375298, 917968218, 1123969915, 1910640900, 1816237341, 2070300432, 1762190419, 1458463254, 458550428, 613393903, 651426189, 362108472, 2056266937, 958111770, 139867038, 774935519, 901839528, 457104116, 1561222912, 1497198999, 523524490, 1003049866, 677504824, 1059666586, 940375427, 950483114, 1305264378, 2102359977, 1533495385, 1403677036, 223411074, 260680263, 1386712067, 968248868, 1905701771, 2107504064, 1464015893, 1942901912, 849368047, 411118039, 1587907991, 1895623455, 672226380, 1544067979, 1699626813, 332250178, 1549770289, 671473653, 887718318, 334565495, 1432355017, 74003423, 1360602095, 867655847, 1298467242, 1548900712, 1172128794, 1733128367);
		
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		
		String correctResult = "pickled peppers Peter Piper picked a peck of pickled peppers Peter Piper picked a peck of pickled pe";
		assertEquals(correctResult, studentOutputString);
	}
	
	@Points(value=10)
	@Test(timeout=120000)
	public void motherGooseTest2()
	{		
		String peterPiper = "Peter Piper picked a peck of pickled peppers; A peck of pickled peppers Peter Piper picked; If Peter Piper picked a peck of pickled peppers, Where's the peck of pickled peppers Peter Piper picked?";
		GhostWriter ghostWriter_STUDENT = getGhostWriter(peterPiper);
		String seed = "If";
		
		TEST_GOAL_MESSAGE = "Generate correct output for inputText = '" + peterPiper + "' and seed = '" + seed + "' and specified selection list";

		List<Integer> selectionList = Arrays.asList(256374724, 467417507, 268504790, 755524626, 1221582886, 957269485);
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		
		String correctResult = "If per";
		assertEquals(correctResult, studentOutputString);
	}
	
	@Points(value=10)
	@Test(timeout=120000)
	public void conanObrienDartmouthCommencementTest()
	{		
		String conanObrienDartmouthCommencementPartialTranscript = "Before I begin, I must point out that behind me sits a highly admired President of the United States and decorated war hero while I, a cable television talk show host, has been chosen to stand here and impart wisdom. I pray I never witness a more damning example of what is wrong with America today. Graduates, faculty, parents, relatives, undergraduates, and old people that just come to these things ----Good morning and congratulations to the Dartmouth Class of 2011. Today, you have achieved something special ----- something only 92 percent of Americans your age will ever know: a college diploma. That’s right, with your college diploma you now have a crushing advantage over 8 percent of the workforce. I’m talking about dropout losers like Bill Gates, Steve Jobs, and Mark Zuckerberg. Incidentally, speaking of Mr. Zuckerberg, only at Harvard would somebody have to invent a massive social network just to talk with someone in the next room. My first job as your commencement speaker is to illustrate that life is not fair. For example, you have worked tirelessly for four years to earn the diploma you’ll be receiving this weekend, and Dartmouth is giving me the same degree for interviewing the fourth lead in Twilight. Deal with it. Another example that life is not fair: if it does rain, the powerful rich people on stage get the tent. Deal with it. I would like to thank President Kim for inviting me here today. After my phone call with President Kim, I decided to find out a little bit about the man. He goes by President Kim and Dr. Kim. To his friends, he’s Jim Kim, J to the K, Special K, JK Rowling, the Just Kidding Kimster, and most puzzling, “Stinky Pete.” He served as the chair of the Department of Global Health and Social Medicine at Harvard Medical School, spearheaded a task force for the World Health Organization on Global Health Initiatives, won a MacArthur Genius Grant and was one of Time Magazine’s 100 Most Influential People in 2006. Good God, man, what the hell are you compensating for? Seriously. We get it; you’re smart. By the way Dr. Kim, you were brought to Dartmouth to lead, and as a world-class anthropologist, you were also hired to figure out why each of these graduating students ran around a bonfire 111 times. But I thank you for inviting me, Stinky Pete, and it is an honor to be here. Though some of you may see me as a celebrity, you should know that I once sat where you sit. Literally. Late last night I snuck out here and sat in every seat. I did it to prove a point ---- I am not bright and I have a lot of free time. But this is a wonderful occasion and it is great to be here in New Hampshire, where I am getting an honorary degree and all the legal fireworks I can fit in the trunk of my car. New Hampshire is such a special place. When I arrived I took a deep breath of this crisp New England air and thought, “Wow, I’m in the state that’s next to the state where Ben and Jerry’s ice cream is made.” But don’t get me wrong, I take my task today very seriously. When I got the call 2 months ago to be your speaker, I decided to prepare with the same intensity many of you have devoted to an important term paper. So late last night, I began. I drank two cans of Red Bull, snorted some Adderall, played a few hours of Call of Duty, and then opened my browser. I think Wikipedia put it best when they said “Dartmouth college is a private Ivy League University in Hanover, New Hampshire, United States.” Thank you and good luck. To communicate with you students today, I have gone to great lengths to become well-versed in your unique linquistic patterns. In fact, just this morning I left Baker Berry with my tripee Barry to eat a Billy Bob at the Bema when my flitz to Francesca was Blitz jacked by some d-bag on his FSP. Yes, I’ve done my research. This college was named after the Second Earl of Dartmouth, a good friend of the Third Earl of UC Santa Cruz and the Duke of the Barbazon School of Beauty. Your school motto is “Vox Clamantis in Deserto,” which means “Voice Crying Out in the Wilderness.” This is easily the most pathetic school motto I have ever heard. Apparently, it narrowly beat out “Silently Weeping in Thick Shrub” and “Wimpering in Moist Leaves without Pants.” Your school color is green, and this color was chosen by Frederick Mather in 1867 because, and this is true, “it was the only color that had not been taken already.” I cannot remember hearing anything so sad. Dartmouth, you have an inferiority complex, and you should not. You have graduated more great fictitious Americans than any other college. Meredith Grey of Grey’s Anatomy. Pete Campbell from Mad Men. Michael Corleone from The Godfather. In fact, I look forward to next years’ Valedictory Address by your esteemed classmate, Count Chocula. Of course, your greatest fictitious graduate is Treasury Secretary Timothy Geitner. Man, imagine if a real Treasury Secretary made those kinds of decisions. Oh, I know. You’re going to say “We’ve got Dr. Seuss.” Well guess what, we’re all tired of hearing about Dr. Seuss. Face it: The man rhymed fafloozle with saznoozle. In the literary community, that’s called cheating. Your insecurity is so great, Dartmouth, that you don’t even think you deserve a real podium. What the hell is this thing? It looks like you stole it from the set of Survivor: Nova Scotia. Seriously, it looks like something a bear would use at an AA meeting. No, Dartmouth, you must stand tall. Raise your heads high and feel proud. ";
		GhostWriter ghostWriter_STUDENT = getGhostWriter(conanObrienDartmouthCommencementPartialTranscript);
		String seed = "Dartmouth";

		TEST_GOAL_MESSAGE = "Generate correct output for inputText = conanObrienDartmouthCommencementPartialTranscript and seed = '" + seed + "' and specified selection list";

		
		List<Integer> selectionList = Arrays.asList(942394752, 846875288, 1885143393, 489255866, 1363124465, 715959934, 416153187, 588443635, 216751701, 260450138, 1865764129, 495746802, 1473900188, 449539952, 788980459, 1722399448, 569983922, 936502291, 1431000684, 1051073172, 1473312391, 1990347817, 1668775695, 995018925, 1834207863, 1985786309, 743276154, 1140336806, 320886439, 230264845, 778469063, 1604387899, 1039196166, 974286869, 1236323299, 1632468353, 1310747711, 599640526, 1898084560, 1329055906, 1596607471, 512929126, 1119103390, 519440452, 1261548762, 1758488810, 75443605, 898707601, 954187055, 1062671519, 1609128680, 1063474313, 641334519, 1363053353, 151285914, 1949096571, 874346202, 1503918740, 838579976, 814277172, 296555741, 557054497, 50869629, 557953303, 1877071059, 1769779410, 1083284378, 511621130, 1056962721, 1111467852, 900232720, 553982006, 1052532802, 1421421295, 893328156, 220420640, 95926806, 381386609, 985613360, 1756955131, 1964723183, 368817168, 1215566020, 869100233, 1666982534, 31584341, 1799057228, 1429740195, 2073653616, 1650994077, 425718897, 617853982, 83529646, 2133272014, 910404946, 83428520, 1766243246, 480221532, 885819890, 1866182203, 1934679431, 228568567, 1169361670, 1653144580, 1170733037, 854401638, 915361900, 805919223, 690251638, 1859825721, 141322316, 950194124, 1714316482, 232110488, 2004112287, 1938638956, 449507032, 330839688, 174868807, 1458361185, 1709028739, 67097089, 66102118, 2141591295, 655138990, 1121465067, 2015332414, 1462665045, 1273268927, 1960773959, 115096378, 954892030, 1257461233, 158992221, 1054706151, 1866342424, 611872825, 553278909, 139372114, 1201148068, 1941857900, 566248001, 2056489704, 162989167, 1033187581, 588681072, 227493874, 229161847, 1132033063, 460040343, 371480996, 1026552816, 1229423193, 569271744, 570331473, 1446045887, 561342464, 2073103696, 453894220, 1638271610, 2032044130, 1001639319, 1345628853, 1154294470, 1692652499, 362030244, 398399182, 1547606541, 798583405, 611667890, 928320032, 381378051, 2040575477, 1963967751, 511444308, 791371337, 452790378, 1044664241, 672289229, 638657082, 932909893, 1930713775, 1756276741, 1781962128, 1500339004, 1744430591, 1901259350, 1489888442, 978728462, 1794534613, 1671454343, 1380085852, 239083133, 204175117, 1341151524, 732426280, 518567526, 1286919435, 1878599256, 56057100);
		
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		String correctResult = "Dartmouth college diploma. That’s right, with your college diploma. That’s right, with your college. Meredith Grey of Grey’s Anatomy. Pete Campbell from Mad Men. Michael Corleone from The Godfather. I";
		assertEquals(correctResult, studentOutputString);
	}
	
	@Points(value=10)
	@Test(timeout=120000)
	public void mountEverestGearTest()
	{
		String mountEverestGear = "Footwear: Double Plastic Climbing Boots with Aveolite Liners. Good quality plastic shells with inner boots. Avoid tight fit with heavy socks. Suggested: Millet One Sport Everest. Fully Insulated Overboots. Suggested: 40 Below K2 Overboots, Outdoor Research Brooks Rangers. Not needed w/ One Sport Everest. Light hiking boots. Crampons. With \"step in\" bindings and flat rather than \"cookie cutter\" frame rails. Suggested: Charlet Moser Super 12 Rapidfix Lanieres, Grivel G12 New-Matic, or Petzl Sarken. Gaiters. Suggested: Outdoor Research Expedition \"Crocodiles\". Not needed with One Sport Everest Boots. Booties. Polar guard. Optional. Wool or pile socks. 4 pair of Heavyweight wool or synthetic socks (wool is warmer) to be worn over the liner socks.  When layering socks, check fit over feet and inside boots. Remember to keep one fresh, dry pair of socks available at all times. Liner Socks. 4 pair of smooth thin wool, nylon or Capilene to be worn next to the skin. This reduces incidence of blisters and hot-spots. Vapor barrier socks. Optional. Climbing Tools Ice Axe w/Leash. General mountaineering tool. Sizing is important: under 5'7\" use a 60cm tool; 5'7\"- 6'1\" use a 65cm tool; over 6'1\" use a 70cm tool. (Too short is preferable to too long). Carabiners (4) Locking; (6) Regular. 2 HMS Twistlock & 2 small screwgate lockers; 6 standard ovals recommended. Ascenders (2). Petzls recommended. One right and one left. Rappel device. 1 Figure 8, ATC or Trango Pyramid. Perlon. 40 ft of flexible 6mm. Alpine Climbing Harness. Harness should fit over all clothing, have gear loops, adjustable leg loops and be reasonably comfortable to hang suspended in.  Make sure  you can get into the harness without having to step through any part of it. Suggested:  Black Diamond Bod Harness or Alpine Bod w/ modification. Adjustable Ski/Trekking Poles. Optional, but recommended. Suggested: Leki, Life Link. Technical Clothing Expedition weight  underwear. 1 pair  Polypro or Capilene. Lightweight  Underwear. 2-3 pair top & bottom, Capilene, other synthetic or wool. No Cotton. Lightweight is preferable as it is more versatile (worn single in warmer conditions and double layer for colder). Zip-T-neck tops allow more ventilation options.  One set of white for intense sunny days on the glacier and one pair of dark for faster drying gives the most versatility. Suggested: North Face Micronamics, Marmot DriClime, or  Patagonia Capilene. Pile  Jacket. Heavyweight pile (Polartec 300). A full-zip version is easier to put on and has better ventilation than a pull-over. Suggested: Pile Pants. Heavyweight pile (Polartec 300)  with full separating side zippers (This is very important for ventilation and for ease of dressing up or down when conditions change in the middle of a climb). Suggested: North Face Polar Sun or equivalent. Down Pants. To fit over insulation layers.  Outer shell must be windproof. Suggested: Feathered Friends Helios or Volant. Down Parka. (Fully Baffled, Expedition Weight, must have good hood) Suggested: Mt. Hardwear Absolute Zero Gore-Tex Shell Pants & Shell Jacket with hood. Or Suit (Bibs recommended) For the jacket we highly recommend a long front zipper, a roomy rather than snug fit and underarm zips which go well below the armpit. We also require full separating side zippers on the pants. Suggested: Mtn. Hardware  Bib or Ethereal Pant. Sleeping Sleeping Bag. (Expedition quality rated to at least -300F). Goose down preferred for bulk & weight. Suggested: North Face Inferno, Feathered Friends Snow Goose, or Marmot CWM. 2 Sleeping Pads. One, 3/4 or full-length closed-cell foam Ridge Rest and One, 3/4 length or full-length Therma-Rest w/repair kit. Mitts & Gloves 2 Pair Synthetic Gloves. Bunting or fleece gloves which will fit comfortably inside mitts. A heavier fleece will do a better job of keeping hands warmer when wet than lighter polypropylene or Capilene. Suggested: North Face, Patagonia. 2 Pair Pile Mitts and Gore-Tex Overmitts. Outdoor Research Expeditions w/double liners or North Face Down Mitts. Should be big enough so that gloves fit inside pile liners. Hand warmer. Optional. Headgear Baseball Cap or other Sun Hat. One with a good visor to shade the nose and eyes. Include a bandanna to shade the neck. Wool or pile ski hat. Make sure ears are covered. Balaclava (1) Heavy weight, (1) Lightweight. Suggested: North Face. Heavyweight must fit over lightweight. Neoprene face mask. Optional Head lamp  (Plenty of extra bulbs & batteries). Suggested:  Petzl Zoom or Artic. 2 Pairs of Glacier glasses. 100% UV, high quality optical lenses designed for mountain use, must have full side covers. We highly recommend a removable nose guard.  Suggested:  Bolle, RayBan, Julbo Round \"Arc\".  If you wear contact lenses we recommend packing a spare pair of glasses-it is a good idea to have these with \"photo-gray\" or equivalent light-sensitive material so they can double as emergency sunglasses.  If you wear glasses we recommend prescription glacier glasses (dark gray or green).  No more than 6% light transmission. Ski Goggles, 1 pair.  100% UV & IR.  Bolle's Chrono work well. Climbers with glasses try X-700, they fit over glasses. Camping Backpack. Internal frame pack  expandable to 6,000 cu.in. Keep it simple and light, avoid unnecessary zippers, etc which add weight. Recommended: North Face, Kelty, Gregory. Daypack. Optional for trekking days. Swiss Army knife. Bic Lighter. 1 Liter Thermos. Cooking Gear: Cup: 16oz. plastic with snap-on lid (retains heat well and is spill resistant in the tent). Spoon:  Good quality tough plastic (lexan). Bowl:  Deep plastic with 2-3 cup capacity. Water Bottles: 2 liters minimum capacity. One, 1.5 liter & One .5 liter wide-mouth. Hunnersdorf are recommended (they withstand temperature extremes and abuse better than Nalgene) No water bags or bladder systems, they freeze. Pee Bottle (1 Liter). Large mouth water bottle. Mark bottle clearly. Pee Funnel (for women). Suggested: Freshette. Sunscreen. SPF 40 or better, 2 small tubes. Lipscreen. SPF 40 or better, at least 2 sticks. Personal first aid kit. Aspirin, Moleskin, Adhesive tape, Band-Aids, personal medications. Traveling Large duffel bags. 2 for transporting gear. Compression Stuff Sacks work well for reducing volume (optional). Especially for sleeping bags and clothing. 4 Plastic Bags. To line stuff sacks to keep gear dry and one large enough to line pack. Trash Compactor bags work the best. Travel clothes. Toiletry bag.  Include toilet paper. Camera gear. Optional";
		GhostWriter ghostWriter_STUDENT = getGhostWriter(mountEverestGear);
		String seed = "Climbing";
		
		TEST_GOAL_MESSAGE = "Generate correct output for inputText = mountEverestGear and seed = '" + seed + "' and specified selection list";

		List<Integer> selectionList = Arrays.asList(656654443, 1547991946, 740443902, 300545348, 1357334747, 1155355662, 683253475, 1456108772, 795981691, 699609315, 469318205, 324038838, 568232978, 682162947, 1041045155, 1658442041, 295299144, 1463261736, 1632499219, 1723713717, 1213032597, 1556765578, 1200505063, 1683784940, 1837086049, 1783742853, 935173341, 1518785307, 1892420947, 1817547475, 88084909, 1232435281, 485199711, 1204077622, 80339725, 752100808, 575279833, 1423887880, 1879218062, 2044591506, 1976028066, 284330029, 336182697, 743235477, 1277411233, 1471824303, 1268848726, 1133659438, 1103103621, 664565920, 833527607, 1352119333, 1824267390, 354731733, 13625536, 1365077696, 577831304, 903530108, 177500644, 872385044, 798191295, 230004281, 1961045069, 1157750822, 2116427738, 1364383516, 1195258724, 598496106, 793894281, 905953395, 1733362326, 1818251002, 408522325, 1174656529, 1401661195, 375584165, 554273721, 1710425294, 823212534, 1236936636, 1296113516, 427318255, 1073258438, 363105952, 1077497758, 1399350557, 511659078, 1554801677, 1863295567, 1318590554, 239178288, 2072465911, 813114317, 722479218, 587603475, 1400213712, 1249843133, 518363657, 485229079, 1366430880, 246203507, 264238634, 1266536220, 2147234368, 1931335230, 178975150, 522606837, 1696878111, 1383893378, 521936471, 961130405, 1784402259, 1414451371, 1559347868, 505281457, 1008991364, 1422039713, 596574295, 872073276, 461062714, 941504754, 715853928);
		
		String studentOutputString = ghostWriter_STUDENT.generate(seed, selectionList);
		
		String correctResult = "Climbing Boots with Aveolite Liners. Good quality tough plastic with snap-on lid (retains heat well and is spill resistant";
		assertEquals(correctResult, studentOutputString);
	}
	
}
